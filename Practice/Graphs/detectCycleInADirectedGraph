class Solution {
    
  private:
  bool dfs(int node, int vis[], int pathVis[], vector<int> adj[]) {
      for(auto it : adj[node]) {
          if(pathVis[it]==1) {
              return true;
          } else if(!vis[it]) {
              vis[it] = 1;
              pathVis[it] = 1;
              if(dfs(it, vis, pathVis, adj)) {
                  return true;
              }
          }
      }
      pathVis[node] = 0;
      return false;
  }
  
  
  public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        // code here
        int vis[V] = {0};
        int pathVis[V] = {0};
        for(int i=0; i<V; i++) {
            if(!vis[i]) {
                vis[i] = 1;
                pathVis[i] = 1;
                if(dfs(i, vis, pathVis, adj)) {
                    return true;
                }
            }
        }
        return false;
    }
};
