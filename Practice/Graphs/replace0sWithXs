void dfs(int xx, int yy, vector<vector<int>>& visited, vector<vector<char>>& mat) {
        int delRow[] = {-1,1,0,0};
        int delCol[] = {0,0,-1,1};
        int m = mat.size();
        int n = mat[0].size();
        for(int i=0; i<4; i++) {
            if(xx+delRow[i] >= 0 && xx+delRow[i] < m && yy+delCol[i] >=0 && yy+delCol[i] < n && mat[xx+delRow[i]][yy+delCol[i]] == 'O' && visited[xx+delRow[i]][yy+delCol[i]] == 0) {
                visited[xx+delRow[i]][yy+delCol[i]] = 1;
                dfs(xx+delRow[i], yy+delCol[i], visited, mat);
            }
        }
    }

vector<vector<char>> fill(int n, int m, vector<vector<char>> mat)
    {
        m = mat.size();
        n = mat[0].size();
        vector<vector<int>> visited(m, vector<int>(n,0));
        
        //first column
        for(int i=0; i<m; i++) {
            if(mat[i][0] == 'O' && visited[i][0] == 0) {
                visited[i][0] = 1;
                dfs(i, 0, visited, mat);
            }
        }
        
        //last column
        for(int i=0; i<m; i++) {
            if(mat[i][n-1] == 'O' && visited[i][n-1] == 0) {
                visited[i][n-1] = 1;
                dfs(i, n-1, visited, mat);
            }
        }
        
        //first row
        for(int i=0; i<n; i++) {
            if(mat[0][i] == 'O' && visited[0][i] == 0) {
                visited[0][i] = 1;
                dfs(0, i, visited, mat);
            }
        }
        
        //last row
        for(int i=0; i<n; i++) {
            if(mat[m-1][i] == 'O' && visited[m-1][i] == 0) {
                visited[m-1][i] = 1;
                dfs(m-1, i, visited, mat);
            }
        }
        
        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                if(mat[i][j] == 'O' && visited[i][j] == 0) {
                    mat[i][j] = 'X';
                }
            }
        }
        return mat;
    }
